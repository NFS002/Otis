// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: api.proto

package api

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Merchant service

type MerchantService interface {
	Create(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	GetAll(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Update(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Delete(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type merchantService struct {
	c    client.Client
	name string
}

func NewMerchantService(name string, c client.Client) MerchantService {
	return &merchantService{
		c:    c,
		name: name,
	}
}

func (c *merchantService) Create(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Merchant.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantService) GetAll(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Merchant.GetAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantService) Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Merchant.Get", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantService) Update(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Merchant.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantService) Delete(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Merchant.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Merchant service

type MerchantHandler interface {
	Create(context.Context, *Request, *Response) error
	GetAll(context.Context, *Request, *Response) error
	Get(context.Context, *Request, *Response) error
	Update(context.Context, *Request, *Response) error
	Delete(context.Context, *Request, *Response) error
}

func RegisterMerchantHandler(s server.Server, hdlr MerchantHandler, opts ...server.HandlerOption) error {
	type merchant interface {
		Create(ctx context.Context, in *Request, out *Response) error
		GetAll(ctx context.Context, in *Request, out *Response) error
		Get(ctx context.Context, in *Request, out *Response) error
		Update(ctx context.Context, in *Request, out *Response) error
		Delete(ctx context.Context, in *Request, out *Response) error
	}
	type Merchant struct {
		merchant
	}
	h := &merchantHandler{hdlr}
	return s.Handle(s.NewHandler(&Merchant{h}, opts...))
}

type merchantHandler struct {
	MerchantHandler
}

func (h *merchantHandler) Create(ctx context.Context, in *Request, out *Response) error {
	return h.MerchantHandler.Create(ctx, in, out)
}

func (h *merchantHandler) GetAll(ctx context.Context, in *Request, out *Response) error {
	return h.MerchantHandler.GetAll(ctx, in, out)
}

func (h *merchantHandler) Get(ctx context.Context, in *Request, out *Response) error {
	return h.MerchantHandler.Get(ctx, in, out)
}

func (h *merchantHandler) Update(ctx context.Context, in *Request, out *Response) error {
	return h.MerchantHandler.Update(ctx, in, out)
}

func (h *merchantHandler) Delete(ctx context.Context, in *Request, out *Response) error {
	return h.MerchantHandler.Delete(ctx, in, out)
}

// Client API for Transaction service

type TransactionService interface {
	Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type transactionService struct {
	c    client.Client
	name string
}

func NewTransactionService(name string, c client.Client) TransactionService {
	return &transactionService{
		c:    c,
		name: name,
	}
}

func (c *transactionService) Get(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Transaction.Get", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Transaction service

type TransactionHandler interface {
	Get(context.Context, *Request, *Response) error
}

func RegisterTransactionHandler(s server.Server, hdlr TransactionHandler, opts ...server.HandlerOption) error {
	type transaction interface {
		Get(ctx context.Context, in *Request, out *Response) error
	}
	type Transaction struct {
		transaction
	}
	h := &transactionHandler{hdlr}
	return s.Handle(s.NewHandler(&Transaction{h}, opts...))
}

type transactionHandler struct {
	TransactionHandler
}

func (h *transactionHandler) Get(ctx context.Context, in *Request, out *Response) error {
	return h.TransactionHandler.Get(ctx, in, out)
}
