// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/transaction/transaction.proto

package transaction

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for TransactionService service

type TransactionService interface {
	CreateTransaction(ctx context.Context, in *Transaction, opts ...client.CallOption) (*CRUDResponse, error)
	GetTransactions(ctx context.Context, in *IDRequest, opts ...client.CallOption) (*CRUDResponse, error)
	DeleteTransactions(ctx context.Context, in *IDRequest, opts ...client.CallOption) (*CRUDResponse, error)
}

type transactionService struct {
	c    client.Client
	name string
}

func NewTransactionService(name string, c client.Client) TransactionService {
	return &transactionService{
		c:    c,
		name: name,
	}
}

func (c *transactionService) CreateTransaction(ctx context.Context, in *Transaction, opts ...client.CallOption) (*CRUDResponse, error) {
	req := c.c.NewRequest(c.name, "TransactionService.CreateTransaction", in)
	out := new(CRUDResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionService) GetTransactions(ctx context.Context, in *IDRequest, opts ...client.CallOption) (*CRUDResponse, error) {
	req := c.c.NewRequest(c.name, "TransactionService.GetTransactions", in)
	out := new(CRUDResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionService) DeleteTransactions(ctx context.Context, in *IDRequest, opts ...client.CallOption) (*CRUDResponse, error) {
	req := c.c.NewRequest(c.name, "TransactionService.DeleteTransactions", in)
	out := new(CRUDResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TransactionService service

type TransactionServiceHandler interface {
	CreateTransaction(context.Context, *Transaction, *CRUDResponse) error
	GetTransactions(context.Context, *IDRequest, *CRUDResponse) error
	DeleteTransactions(context.Context, *IDRequest, *CRUDResponse) error
}

func RegisterTransactionServiceHandler(s server.Server, hdlr TransactionServiceHandler, opts ...server.HandlerOption) error {
	type transactionService interface {
		CreateTransaction(ctx context.Context, in *Transaction, out *CRUDResponse) error
		GetTransactions(ctx context.Context, in *IDRequest, out *CRUDResponse) error
		DeleteTransactions(ctx context.Context, in *IDRequest, out *CRUDResponse) error
	}
	type TransactionService struct {
		transactionService
	}
	h := &transactionServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TransactionService{h}, opts...))
}

type transactionServiceHandler struct {
	TransactionServiceHandler
}

func (h *transactionServiceHandler) CreateTransaction(ctx context.Context, in *Transaction, out *CRUDResponse) error {
	return h.TransactionServiceHandler.CreateTransaction(ctx, in, out)
}

func (h *transactionServiceHandler) GetTransactions(ctx context.Context, in *IDRequest, out *CRUDResponse) error {
	return h.TransactionServiceHandler.GetTransactions(ctx, in, out)
}

func (h *transactionServiceHandler) DeleteTransactions(ctx context.Context, in *IDRequest, out *CRUDResponse) error {
	return h.TransactionServiceHandler.DeleteTransactions(ctx, in, out)
}
