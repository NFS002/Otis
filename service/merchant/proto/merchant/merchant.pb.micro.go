// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: service/merchant/proto/merchant/merchant.proto

package merchant

import (
	_ "gitlab.com/otis_team/backend/dtypes/general-merchant/proto"
	_ "gitlab.com/otis_team/backend/dtypes/partner-merchant/proto"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for MerchantService service

type MerchantService interface {
	CreateGeneralMerchant(ctx context.Context, in *MerchantRequest, opts ...client.CallOption) (*MerchantsResponse, error)
	CreatePartnerMerchant(ctx context.Context, in *MerchantRequest, opts ...client.CallOption) (*MerchantsResponse, error)
	GetGeneralMerchant(ctx context.Context, in *MerchantQuery, opts ...client.CallOption) (*MerchantsResponse, error)
	GetPartnerMerchant(ctx context.Context, in *MerchantQuery, opts ...client.CallOption) (*MerchantsResponse, error)
	DeleteGeneralMerchant(ctx context.Context, in *MerchantQuery, opts ...client.CallOption) (*MerchantsResponse, error)
	DeletePartnerMerchant(ctx context.Context, in *MerchantQuery, opts ...client.CallOption) (*MerchantsResponse, error)
}

type merchantService struct {
	c    client.Client
	name string
}

func NewMerchantService(name string, c client.Client) MerchantService {
	return &merchantService{
		c:    c,
		name: name,
	}
}

func (c *merchantService) CreateGeneralMerchant(ctx context.Context, in *MerchantRequest, opts ...client.CallOption) (*MerchantsResponse, error) {
	req := c.c.NewRequest(c.name, "MerchantService.CreateGeneralMerchant", in)
	out := new(MerchantsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantService) CreatePartnerMerchant(ctx context.Context, in *MerchantRequest, opts ...client.CallOption) (*MerchantsResponse, error) {
	req := c.c.NewRequest(c.name, "MerchantService.CreatePartnerMerchant", in)
	out := new(MerchantsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantService) GetGeneralMerchant(ctx context.Context, in *MerchantQuery, opts ...client.CallOption) (*MerchantsResponse, error) {
	req := c.c.NewRequest(c.name, "MerchantService.GetGeneralMerchant", in)
	out := new(MerchantsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantService) GetPartnerMerchant(ctx context.Context, in *MerchantQuery, opts ...client.CallOption) (*MerchantsResponse, error) {
	req := c.c.NewRequest(c.name, "MerchantService.GetPartnerMerchant", in)
	out := new(MerchantsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantService) DeleteGeneralMerchant(ctx context.Context, in *MerchantQuery, opts ...client.CallOption) (*MerchantsResponse, error) {
	req := c.c.NewRequest(c.name, "MerchantService.DeleteGeneralMerchant", in)
	out := new(MerchantsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantService) DeletePartnerMerchant(ctx context.Context, in *MerchantQuery, opts ...client.CallOption) (*MerchantsResponse, error) {
	req := c.c.NewRequest(c.name, "MerchantService.DeletePartnerMerchant", in)
	out := new(MerchantsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MerchantService service

type MerchantServiceHandler interface {
	CreateGeneralMerchant(context.Context, *MerchantRequest, *MerchantsResponse) error
	CreatePartnerMerchant(context.Context, *MerchantRequest, *MerchantsResponse) error
	GetGeneralMerchant(context.Context, *MerchantQuery, *MerchantsResponse) error
	GetPartnerMerchant(context.Context, *MerchantQuery, *MerchantsResponse) error
	DeleteGeneralMerchant(context.Context, *MerchantQuery, *MerchantsResponse) error
	DeletePartnerMerchant(context.Context, *MerchantQuery, *MerchantsResponse) error
}

func RegisterMerchantServiceHandler(s server.Server, hdlr MerchantServiceHandler, opts ...server.HandlerOption) error {
	type merchantService interface {
		CreateGeneralMerchant(ctx context.Context, in *MerchantRequest, out *MerchantsResponse) error
		CreatePartnerMerchant(ctx context.Context, in *MerchantRequest, out *MerchantsResponse) error
		GetGeneralMerchant(ctx context.Context, in *MerchantQuery, out *MerchantsResponse) error
		GetPartnerMerchant(ctx context.Context, in *MerchantQuery, out *MerchantsResponse) error
		DeleteGeneralMerchant(ctx context.Context, in *MerchantQuery, out *MerchantsResponse) error
		DeletePartnerMerchant(ctx context.Context, in *MerchantQuery, out *MerchantsResponse) error
	}
	type MerchantService struct {
		merchantService
	}
	h := &merchantServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MerchantService{h}, opts...))
}

type merchantServiceHandler struct {
	MerchantServiceHandler
}

func (h *merchantServiceHandler) CreateGeneralMerchant(ctx context.Context, in *MerchantRequest, out *MerchantsResponse) error {
	return h.MerchantServiceHandler.CreateGeneralMerchant(ctx, in, out)
}

func (h *merchantServiceHandler) CreatePartnerMerchant(ctx context.Context, in *MerchantRequest, out *MerchantsResponse) error {
	return h.MerchantServiceHandler.CreatePartnerMerchant(ctx, in, out)
}

func (h *merchantServiceHandler) GetGeneralMerchant(ctx context.Context, in *MerchantQuery, out *MerchantsResponse) error {
	return h.MerchantServiceHandler.GetGeneralMerchant(ctx, in, out)
}

func (h *merchantServiceHandler) GetPartnerMerchant(ctx context.Context, in *MerchantQuery, out *MerchantsResponse) error {
	return h.MerchantServiceHandler.GetPartnerMerchant(ctx, in, out)
}

func (h *merchantServiceHandler) DeleteGeneralMerchant(ctx context.Context, in *MerchantQuery, out *MerchantsResponse) error {
	return h.MerchantServiceHandler.DeleteGeneralMerchant(ctx, in, out)
}

func (h *merchantServiceHandler) DeletePartnerMerchant(ctx context.Context, in *MerchantQuery, out *MerchantsResponse) error {
	return h.MerchantServiceHandler.DeletePartnerMerchant(ctx, in, out)
}
